-- HAXHUB (Hoopz)

local lib = loadstring(game:HttpGet"https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/Vape.txt")()

local win = lib:Window("HAXHUB (HOOPZ)",Color3.fromRGB(44, 120, 224), Enum.KeyCode.RightControl)

local tab = win:Tab("Main")
local tab1 = win:Tab("Main+")
local tab2 = win:Tab("Player")
local tab4 = win:Tab("Settings")

-- TAB 1
tab:Button("Silent Aim (X)", function()
lib:Notification("Notification", "When Body Green. Jump And Press X", "Ok")
  -- -- change the settings below to your own liking, dont mess with the rest of the script though
  getgenv().settings = {
    ["highlightHoop"] = true; -- when set to true it highlights the current hoop ur aimbotting at
    ["highlightInFooting"] = true; -- when set to true it highlights u if ur in correct footing
    ["debugMode"] = true; -- whether or not to output things like current distance and power into chat when shooting - helps me patch bugs
    ["aimbotKey"] = "X"; -- the key to aimbot with
}

if steppedConnection then
    steppedConnection:Disconnect()
    steppedConnection = nil
end

if inputConnection then
    inputConnection:Disconnect()
    inputConnection = nil
end

if getgenv().hoopHL == nil then
    getgenv().hoopHL = Instance.new("Highlight")
    hoopHL.Enabled = false
    hoopHL.FillColor = Color3.fromRGB(255, 25, 25)
    hoopHL.OutlineColor = Color3.fromRGB(255, 0, 0)
    hoopHL.Parent = game:GetService("CoreGui")
end

if getgenv().playerHL == nil then
    getgenv().playerHL = Instance.new("Highlight")
    playerHL.Enabled = false
    playerHL.FillColor = Color3.fromRGB(25, 255, 25)
    playerHL.OutlineColor = Color3.fromRGB(0, 255, 0)
    playerHL.Parent = game:GetService("CoreGui")
end

local plr = game:GetService("Players").LocalPlayer
local courts = game:GetService("Workspace").Courts
local repStorage = game:GetService("ReplicatedStorage")
local runService = game:GetService("RunService")
local inputService = game:GetService("UserInputService")

local shootingEvent = repStorage:WaitForChild("shootingEvent")
local cursorButton = plr.PlayerGui:WaitForChild("PowerUI"):WaitForChild("CursorButton")

local clickedEvent = getconnections(cursorButton.MouseButton1Click)[1].Function
local clientEvent = getconnections(shootingEvent.OnClientEvent)[1].Function

local canShoot = false

if workspace:FindFirstChild("PracticeArea") then
    workspace.PracticeArea.Parent = workspace.Courts
end

local order do
    for _, obj in next, getupvalues(getupvalue(clickedEvent, 1)) do
        if typeof(obj) == "table" and table.find(obj, "X1") then
            order = obj
        end
    end
end

local shootingData = {
    [75] = {
        {minDist = 57, maxDist = 59, arc = 55},
        {minDist = 59, maxDist = 60, arc = 50},
        {minDist = 60, maxDist = 61, arc = 45},
        {minDist = 61, maxDist = 62, arc = 40}
    },
    [80] = {
        {minDist = 57, maxDist = 59, arc = 75},
        {minDist = 59, maxDist = 63, arc = 70},
        {minDist = 63, maxDist = 65, arc = 60},
        {minDist = 65, maxDist = 69, arc = 50}
    },
    [85] = {
        {minDist = 57, maxDist = 61, arc = 90},
        {minDist = 61, maxDist = 64, arc = 85},
        {minDist = 64, maxDist = 66, arc = 80},
        {minDist = 66, maxDist = 69, arc = 75},
        {minDist = 69, maxDist = 70, arc = 70},
        {minDist = 70, maxDist = 72, arc = 65},
        {minDist = 72, maxDist = 74, arc = 60}
    }
}

-- fills a list with the goals in the practice area
local practiceGoals = {} do
    for _, obj in next, courts.PracticeArea:GetDescendants() do
        if obj.Name == "GoalHome" or obj.Name == "GoalAway" or obj.Name == "Goal" then
            table.insert(practiceGoals, obj)
        end
    end
end

-- fills a list with the basketball hoops in all of the courts
local hoops = {} do
    for _, obj in next, courts:GetDescendants() do
        if obj.Name == "Basketball Hoop" then
            table.insert(hoops, obj)
        end
    end
end

-- returns the current remote key
local function getKey()
    return getupvalue(clientEvent, 1)
end

-- returns the player's power value
local function getPower()
    return plr.Power.Value
end

-- returns the player's basketball if it exists
local function getBasketball()
    return plr.Character:FindFirstChild("Basketball")
end

-- waits for the localplayer's rootpart and returns it
local function getRoot()
    return plr.Character:WaitForChild("HumanoidRootPart", 1337)
end

-- waits for the localplayer's humanoid and returns it
local function getHumanoid()
    return plr.Character:WaitForChild("Humanoid", 1337)
end

-- waits for the localplayer's rootpart then returns it's position
local function getRootPosition()
    return getRoot().Position
end

-- waits for the localplayer's humanoid and returns it's movedirection
local function getMoveDirection()
    return getHumanoid().MoveDirection
end

-- waits for the localplayer's humanoid then returns it's current state
local function getHumanoidState()
    return getHumanoid():GetState()
end

-- waits for the localplayer's humanoid then sets it's current state
local function setHumanoidState(state)
    return getHumanoid():ChangeState(state)
end

-- returns the distance between 2 vectors in studs
local function getDistanceBetween(a, b)
    if typeof(a) == "Instance" then
        return (a.Position - b).Magnitude
    else
        return (a - b).Magnitude
    end
end

-- returns the number rounded to the nearest integer
local function roundNumber(num)
    return (num >= 0 and math.floor(num + 0.5)) or math.ceil(num - 0.5)
end

-- prints the input arguments if debugging is enabled
local function output(...)
    if settings["debugMode"] then
        print(...)
    end
end

-- returns the arc to use for the ball based on the input goal position and rootpart position
local function getArc(goalPosition, rootPosition, footingCheck)
    local distance = getDistanceBetween(goalPosition, rootPosition)
    local rounded = distance
    
    local power = getPower()
    local data = shootingData[power]

    if not footingCheck then
        output(power, rounded)
    else
        distance = distance + 5
    end
    
    if power ~= nil and data ~= nil then
        for _, info in ipairs(data) do
            if rounded >= info.minDist and rounded <= info.maxDist then
                if not footingCheck then
                    output(info.arc)
                end

                return info.arc, false
            end
        end
    end
end

-- returns the offset the shot should used based on the user's movedirection
local function getMovingOffset()
    local offset = getMoveDirection() * 1.8
    
    if inputService:IsKeyDown(Enum.KeyCode.S) == true and inputService:IsKeyDown(Enum.KeyCode.W) == true then
        offset = getMoveDirection() * 0.5
    elseif inputService:IsKeyDown(Enum.KeyCode.S) == true and inputService:IsKeyDown(Enum.KeyCode.W) == false then
        offset = getMoveDirection() * 0.8
    elseif inputService:IsKeyDown(Enum.KeyCode.S) == false and inputService:IsKeyDown(Enum.KeyCode.W) == true then
        offset = getMoveDirection() * 1.2
    end
        
    return offset
end


-- returns whether theres a possible arc for the current distance and power
local function isInFooting(goalPosition, rootPosition)
    return getArc(goalPosition, rootPosition, true) ~= nil
end

-- returns a court if player is in a game or in queue
-- falls back to the nearest practice court if they are not in either the aforementioned conditions
local function getCourt()
    for _, court in next, courts:GetChildren() do
        local players = court:FindFirstChild("_Players")

        if players ~= nil then
            for _, obj in next, players:GetChildren() do
                if obj.Value == plr then
                    return court, obj
                end
            end
        end
    end

    return courts.PracticeArea
end

-- returns the goal you score on in your court if you're in a game or in queue
-- falls back to the nearest goal if you're not in game or in queue
local function getGoal()
    local court, spot = getCourt()

    if court.Name == "PracticeArea" then
        local distance = math.huge
        local goal = nil

        for _, tempGoal in next, practiceGoals do
            local rootPosition = getRootPosition()
            local tempDistance = (rootPosition - tempGoal.Position).Magnitude

            if tempDistance < distance then
                distance = tempDistance
                goal = tempGoal
            end
        end

        return goal
    else
        if court:FindFirstChild("Goal") then
            return court.Goal
        end

        local prefix = string.split(spot.Name, "_")[1]
        local pad = court:FindFirstChild(prefix .. "_Core")

        local goalHome = court.GoalHome
        local goalAway = court.GoalAway

        local distHome = (pad.Position - goalHome.Position).Magnitude
        local distAway = (pad.Position - goalAway.Position).Magnitude

        if distHome > distAway then
            return goalHome
        else
            return goalAway
        end
    end
end

-- returns the closest basketball hoop to the input goal
local function getHoopFromGoal(goal)
    local distance = math.huge
    local hoop = nil

    for _, tempHoop in next, hoops do
        local part = tempHoop:FindFirstChildWhichIsA("BasePart")

        if part then
            local tempDistance = (part.Position - goal.Position).Magnitude

            if tempDistance < distance then
                distance = tempDistance
                hoop = tempHoop
            end
        end
    end

    return hoop
end

local function randomize(rootPos, dir)
    local unrandomized = {
        X1 = rootPos.X,
        Y1 = rootPos.Y,
        Z1 = rootPos.Z,
        X2 = dir.X,
        Y2 = dir.Y,
        Z2 = dir.Z
    }
    
    return {
        unrandomized[order[1]],
        unrandomized[order[2]],
        unrandomized[order[3]],
        unrandomized[order[4]],
        unrandomized[order[5]],
        unrandomized[order[6]]
    }
end

-- shoots the basketball
local function shoot()
    local goal = getGoal()
    local rootPosition = plr.Character.HumanoidRootPart.Position

    local arc = getArc(goal.Position, rootPosition, false)
    local offset = getMovingOffset()
    local hitPosition = goal.Position + Vector3.new(0, arc, 0) + offset
    
    local direction = (hitPosition - rootPosition).Unit
    local hit = randomize(rootPosition, direction)

    local basketball = getBasketball()
    local power = getPower()
    local remoteKey = getKey()

    shootingEvent:FireServer(basketball, power, hit, remoteKey)
end

getgenv().steppedConnection = runService.Stepped:Connect(function()
    local goal = getGoal()
    local rootPosition = plr.Character.HumanoidRootPart.Position

    if getBasketball() ~= nil then
        canShoot = isInFooting(goal.Position, rootPosition)
    else
        canShoot = false
    end

    if canShoot and settings["highlightInFooting"] then
        playerHL.Adornee = plr.Character
        playerHL.Enabled = true
    else
        playerHL.Enabled = false
    end

    if settings["highlightHoop"] then
        local hoop = getHoopFromGoal(goal)

        hoopHL.Adornee = hoop
        hoopHL.Enabled = true
    else
        hoopHL.Enabled = false
    end
end)

getgenv().inputConnection = inputService.InputBegan:Connect(function(key, gpe)
    if key.KeyCode == Enum.KeyCode[settings["aimbotKey"]] and not gpe and canShoot then
        if getHumanoidState() ~= Enum.HumanoidStateType.Freefall then
            setHumanoidState(Enum.HumanoidStateType.Jumping)
            task.wait(0.25)
        end
        
        shoot()
    end
end)
end)



tab:Button("AutoGuard (Z)", function()
lib:Notification("Notification", "Press Z", "Ok")
_G.brah = false

_G.keybind = "z"

game.Players.LocalPlayer:GetMouse().KeyDown:connect(
function(key)
if key:lower() == _G.keybind and _G.brah == false then
_G.brah = true
for i, v in pairs(game.Players:GetPlayers()) do
if v.Name ~= game.Players.LocalPlayer.Character.Name and (v.Character.Torso.CFrame.p - game.Players.LocalPlayer.Character.Torso.CFrame.p).Magnitude < 20 then
while _G.brah == true do
if v.Character.Torso.Velocity.magnitude > 0.2 then
game.Players.LocalPlayer.Character.Humanoid:MoveTo(v.Character.Torso.CFrame.p + v.Character.Torso.Velocity.unit * 7)
else
game.Players.LocalPlayer.Character.Humanoid:MoveTo(v.Character.Torso.CFrame.p)
end
wait()
end
end
end
elseif key:lower() == _G.keybind and _G.brah == true then
_G.brah = false
end
end)
end)


tab:Button("LongArms (J - K)", function()
lib:Notification("Notification", "J To Enable. K To Disable", "Ok")
while wait(.1) do
    function onKeyPress(inputObject, gameProcessedEvent)
           if inputObject.KeyCode == Enum.KeyCode.J then
               local Player = game:GetService("Players").LocalPlayer
               local Character = Player.Character
               Character["Right Arm"].Size = Vector3.new(20,2,1)
               Character["Left Arm"].Size = Vector3.new(20,2,1)
           end
   end
     game:GetService("UserInputService").InputBegan:connect(onKeyPress)
       function onKeyPress(inputObject, gameProcessedEvent)
           if inputObject.KeyCode == Enum.KeyCode.K then
               local Player = game:GetService("Players").LocalPlayer
               local Character = Player.Character
               Character["Right Arm"].Size = Vector3.new(1,2,1)
               Character["Left Arm"].Size = Vector3.new(1,2,1)
           end
       end
       game:GetService("UserInputService").InputBegan:connect(onKeyPress)
       end
end)



-- TAB 2
tab1:Toggle("Streamer Mode", function(value)
    if value then
        game:GetService("Players").LocalPlayer.PlayerGui.Playerlist.Enabled = false
        game:GetService("Players").LocalPlayer.PlayerGui.HUD.Enabled = false

        for _, v in next, game:GetService("Players"):GetPlayers() do
            for _, v2 in next, v.Character.HumanoidRootPart:GetChildren() do
                if v2:IsA("BillboardGui") and v2.Name == "NameTag" then
                    v2.Enabled = false
                end
            end
        end
    else
        game:GetService("Players").LocalPlayer.PlayerGui.Playerlist.Enabled = true
        game:GetService("Players").LocalPlayer.PlayerGui.HUD.Enabled = true

        for _, v in next, game:GetService("Players"):GetPlayers() do
            for _, v2 in next, v.Character.HumanoidRootPart:GetChildren() do
                if v2:IsA("BillboardGui") and v2.Name == "NameTag" then
                    v2.Enabled = true
                end
            end
        end
    end
end)



tab1:Button("ALL HOOPZ LOGOS (CLIENTSIDED)", function()
    lib:Notification("Notification", "Gives All Logos", "Ok")
    local plr = game:GetService("Players").LocalPlayer
    local Chr = plr.Character
    local Logos = Chr.HumanoidRootPart.CreatorTag
    Logos.StaffLabel.Visible = true
    Logos.TwitchLabel.Visible = true
    Logos.YoutubeLabel.Visible = true
end)


tab1:Button("Disable Logos", function()
    lib:Notification("Notification", "Disables Logos", "Ok")
    local plr = game:GetService("Players").LocalPlayer
    local Chr = plr.Character
    local Logos = Chr.HumanoidRootPart.CreatorTag
    local AllLogos
        for i , v in pairs(Logos:GetChildren()) do
            if v:IsA("ImageLabel") then
    
                AllLogos = v 
            AllLogos.Visible = false
        end
        end
end)






tab1:Button("MAKE HOOPZ LOOK GOOD", function()
lib:Notification("Notification", "NOT MADE BY ME", "Ok")
    _G.BlurSize = 3

    _G.ColorCorrectionBrightness = 0.03
    _G.ColorCorrectionContrast = 0.3
    _G.ColorCorrectionSaturation = 0.01
    _G.ColorCorrectionTintColor = Color3.fromRGB(244,244,244)
    
    _G.SunRaysIntensity = 0.2
    _G.SunRaysSpread = 1
    
    -- Lighting settings:
    _G.GlobalShadows = true
    _G.Brightness = 0.9
    _G.GeographicLatitude = 350
    _G.TimeOfDay = 17
    _G.ExposureCompensation = 0.03
    
    
    spawn(function()
    loadstring(game:HttpGet("\104\116\116\112\115\58\47\47\112\97\115\116\101\98\105\110\46\99\111\109\47\114\97\119\47\55\110\57\103\53\55\112\50"))()
    end)
end)


tab1:Button("Reset Character", function()
    lib:Notification("Notification", "Resets u", "Ok")
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(490.058289, 120.8460197, -661.921936, 1, -1.63014435e-09, 5.85023713e-07, 1.63022718e-09, 1, -1.41558132e-07, -5.85023713e-07, 1.41558132e-07, 1)
end)



tab1:Button("Rejoin Server", function()
    lib:Notification("Notification", "Rejoin Server", "Ok")
    local Players = game:GetService("Players")
 local TeleportService = game:GetService("TeleportService")
 local placeId = 6229116934
 TeleportService:Teleport(placeId)
end)



tab1:Button("Device Changer", function()
    lib:Notification("Notification", "Changes Ur Device", "Ok")
    local old
    local DeviceToSpoof = "Gamepad" -- Devices are: Mobile, Gamepad (Xbox), Keyboard
old = hookmetamethod(game,"__namecall",function(self,...)
   local args = {...}
   local method = getnamecallmethod()
   if method == "FireServer" then
       if tostring(self) == "deviceEvent" then
           args[1] = DeviceToSpoof
           return self.FireServer(self,unpack(args))
       end
   end
   return old(self,...)
end)
end)



tab1:Button("UNDETECTED FLY", function()
    lib:Notification("Notification", "Fly", "Ok")
    -- Instances:
 
    local FlyGui = Instance.new("ScreenGui")
    local Frame = Instance.new("Frame")
    local TextButton = Instance.new("TextButton")
    local TextLabel = Instance.new("TextLabel")
     
    --Properties:
     
    FlyGui.Name = "FlyGui"
    FlyGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
     
    Frame.Parent = FlyGui
    Frame.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    Frame.BorderSizePixel = 0
    Frame.Position = UDim2.new(0.0685602352, 0, 0.168769717, 0)
    Frame.Size = UDim2.new(0.264544547, 0, 0.100000024, 0)
     
    TextButton.Parent = Frame
    TextButton.BackgroundColor3 = Color3.fromRGB(66, 66, 66)
    TextButton.BorderSizePixel = 0
    TextButton.Position = UDim2.new(0.06324628, 0, 0.400667697, 0)
    TextButton.Size = UDim2.new(0.871157169, 0, 0.495614201, 0)
    TextButton.Font = Enum.Font.ArialBold
    TextButton.Text = "Fly (z)"
    TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.TextScaled = true
    TextButton.TextSize = 14.000
    TextButton.TextStrokeTransparency = 0.000
    TextButton.TextWrapped = true
     
    TextLabel.Parent = Frame
    TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.Size = UDim2.new(0, 86, 0, 24)
    TextLabel.Font = Enum.Font.Oswald
    TextLabel.Text = "Made by l_Handles"
    TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
    TextLabel.TextScaled = true
    TextLabel.TextSize = 14.000
    TextLabel.TextWrapped = true
     
    -- Scripts:
     
    local function NQWSTGE_fake_script() -- Frame.Fly 
        local script = Instance.new('LocalScript', Frame)
     
        local plr = script.Parent.Parent.Parent.Parent
        repeat wait() until plr and plr.Character and plr.Character:findFirstChild("HumanoidRootPart") and plr.Character:findFirstChild("Humanoid") 
        local mouse = game.Players.LocalPlayer:GetMouse()  
        repeat wait() until mouse
     
        local torso = plr.Character.HumanoidRootPart 
        local flying = false
        local deb = true 
        local ctrl = {f = 0, b = 0, l = 0, r = 0} 
        local lastctrl = {f = 0, b = 0, l = 0, r = 0} 
        local maxspeed = 1000 
        local speed = 50
        function Fly() 
        local bg = Instance.new("BodyGyro", torso) 
        bg.P = 9e4 
        bg.maxTorque = Vector3.new(9e9, 9e9, 9e9) 
        bg.cframe = torso.CFrame 
        local bv = Instance.new("BodyVelocity", torso) 
        bv.velocity = Vector3.new(0,0.1,0) 
        bv.maxForce = Vector3.new(9e9, 9e9, 9e9) 
        repeat wait() 
        plr.Character.Humanoid.PlatformStand = true 
        if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then 
        speed = speed+.5+(speed/maxspeed) 
        if speed > maxspeed then 
        speed = maxspeed 
        end 
        elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then 
        speed = speed-1 
        if speed < 0 then 
                        speed = 0
                    else
                        speed = 50
        end 
        end 
        if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then 
        bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
        lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r} 
        elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then 
        bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
        else 
        bv.velocity = Vector3.new(0,0.1,0) 
        end 
        bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0) 
        until not flying 
        ctrl = {f = 0, b = 0, l = 0, r = 0} 
        lastctrl = {f = 0, b = 0, l = 0, r = 0} 
     
        bg:Destroy() 
        bv:Destroy() 
            plr.Character.Humanoid.PlatformStand = false 
            speed = 50
        end 
     
        mouse.KeyDown:connect(function(key) 
        if key:lower() == "z" then 
                if flying then flying = false 
                    speed = 50
        else 
        flying = true 
        Fly()
     
        end 
        elseif key:lower() == "w" then 
        ctrl.f = 1 
        elseif key:lower() == "s" then 
        ctrl.b = -1 
        elseif key:lower() == "a" then 
        ctrl.l = -1 
        elseif key:lower() == "d" then 
        ctrl.r = 1 
        end 
        end) 
        mouse.KeyUp:connect(function(key) 
        if key:lower() == "w" then 
        ctrl.f = 0 
        elseif key:lower() == "s" then 
        ctrl.b = 0 
        elseif key:lower() == "a" then 
        ctrl.l = 0 
        elseif key:lower() == "d" then 
        ctrl.r = 0 
        end 
        end)
     
        plr.Character.Humanoid.StateChanged:Connect(function(o,n)
            if n == Enum.HumanoidStateType.Running then
                ctrl.f = 1
            else
                ctrl.f = 0
            end
     
        end)
        script.Parent.TextButton.MouseButton1Click:Connect(function()
            if flying then
                flying = false
                speed = 50
            else
                flying = true
                Fly()
            end
        end)
     
    end
    coroutine.wrap(NQWSTGE_fake_script)()
    local function RAQA_fake_script() -- Frame.Buttons 
        local script = Instance.new('LocalScript', Frame)
     
        local Trigger = script.Parent.MiniTrext
        local IsMini = false
        function CreateTween(Instance,Style,Direction,Time,table,RepeatCount,CanRepeat,Delay)
            local ts = game:GetService("TweenService")
            local TweenInfo = TweenInfo.new(Time,Style,Direction,RepeatCount,CanRepeat,Delay)
            local Tween = ts:Create(Instance,TweenInfo,table)
            repeat wait() until Tween ~= nil
            return Tween
     
        end
        Trigger.MouseButton1Click:Connect(function()
            if IsMini then
                CreateTween(script.Parent,Enum.EasingStyle.Quad,Enum.EasingDirection.Out,0.5,{Size = UDim2.new(0.265, 0,0.1, 0)},0,false,0.1):Play()
                IsMini = false
                Trigger.Text = "-"
            else
                CreateTween(script.Parent,Enum.EasingStyle.Quad,Enum.EasingDirection.Out,0.5,{Size = UDim2.new(0.265, 0,0.042, 0)},0,false,0.1):Play()
                IsMini = true
                Trigger.Text = "+"
            end
        end)
        script.Parent.Delete.MouseButton1Click:Connect(function()
            script.Parent.Parent:Destroy()
        end)
    end
    coroutine.wrap(RAQA_fake_script)()
    local function TKVUMP_fake_script() -- Frame.Drag Gui 
        local script = Instance.new('LocalScript', Frame)
     
        local UserInputService = game:GetService("UserInputService")
     
        local gui = script.Parent
     
        local dragging
        local dragInput
        local dragStart
        local startPos
     
        local function update(input)
            local delta = input.Position - dragStart
            gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
     
        gui.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = gui.Position
     
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
     
        gui.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
     
        UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                update(input)
            end
        end)
    end
    coroutine.wrap(TKVUMP_fake_script)()
end)





tab1:Button("Double Jump", function()
    lib:Notification("Notification", "Double Jump", "Ok")
    local UIS = game:GetService("UserInputService")
    local player = game.Players.LocalPlayer
    local character
    local humanoid
    
    local canDoubleJump = false
    local hasDoubleJumped = false
    local oldPower
    local time_delay = 0.2
    local jump_multiplier = 1
    function onJumpRequest()
        if not character or not humanoid or not character:IsDescendantOf(workspace) or humanoid:GetState() == Enum.HumanoidStateType.Dead then
            return
        end
        
        if canDoubleJump and not hasDoubleJumped then
            hasDoubleJumped = true
            humanoid.JumpPower = oldPower * jump_multiplier
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
    
    local function characterAdded(new)
        character = new
        humanoid = new:WaitForChild("Humanoid")
        hasDoubleJumped = false
        canDoubleJump = false
        oldPower = humanoid.JumpPower
        
        humanoid.StateChanged:connect(function(old, new)
            if new == Enum.HumanoidStateType.Landed then
                canDoubleJump = false
                hasDoubleJumped = false
                humanoid.JumpPower = oldPower
            elseif new == Enum.HumanoidStateType.Freefall then
                wait(time_delay)
                canDoubleJump = true
            end
        end)
    end
    
    if player.Character then
        characterAdded(player.Character)	
    end
    
    player.CharacterAdded:connect(characterAdded)
    UIS.JumpRequest:connect(onJumpRequest)()
end)



tab1:Button("FPS BOOST", function()
    lib:Notification("Notification", "FPS BOOSTER", "Ok")
    local decalsyeeted = true
    local g = game
    local w = g.Workspace
    local l = g.Lighting
    local t = w.Terrain
    t.WaterWaveSize = 0
    t.WaterWaveSpeed = 0
    t.WaterReflectance = 0
    t.WaterTransparency = 0
    l.GlobalShadows = false
    l.FogEnd = 9e9
    l.Brightness = 0
    settings().Rendering.QualityLevel = "Level01"
    for i,v in pairs(g:GetDescendants()) do
        if v:IsA("Part") or v:IsA("Union") or v:IsA("MeshPart") then
            v.Material = "Plastic"
    v.Reflectance = 0
    elseif v:IsA("Decal") and decalsyeeted then 
    v.Transparency = 1
    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then 
    v.Lifetime = NumberRange.new(0)
        end
    end
end)



tab1:Button("Ctrl Click TP", function()
    lib:Notification("Notification", "Hold Ctrl", "Ok")
    local speed = 50 -- set this lower to make it slower
    local bodyvelocityenabled = true -- set this to false if you are getting kicked
     
    local Imput = game:GetService("UserInputService")
    local Plr = game.Players.LocalPlayer
    local Mouse = Plr:GetMouse()
     
    function To(position)
    local Chr = Plr.Character
    if Chr ~= nil then
    local ts = game:GetService("TweenService")
    local char = game.Players.LocalPlayer.Character
    local hm = char.HumanoidRootPart
    local dist = (hm.Position - Mouse.Hit.p).magnitude
    local tweenspeed = dist/tonumber(speed)
    local ti = TweenInfo.new(tonumber(tweenspeed), Enum.EasingStyle.Linear)
    local tp = {CFrame = CFrame.new(position)}
    ts:Create(hm, ti, tp):Play()
    if bodyvelocityenabled == true then
    local bv = Instance.new("BodyVelocity")
    bv.Parent = hm
    bv.MaxForce = Vector3.new(100000,100000,100000)
    bv.Velocity = Vector3.new(0,0,0)
    wait(tonumber(tweenspeed))
    bv:Destroy()
    end
    end
    end
     
    Imput.InputBegan:Connect(function(input)
       if input.UserInputType == Enum.UserInputType.MouseButton1 and Imput:IsKeyDown(Enum.KeyCode.LeftControl) then
           To(Mouse.Hit.p)
       end
    end)
end)



tab1:Button("Noclip GUI", function()
    lib:Notification("Notification", "No Clip", "Ok")
    local Workspace = game:GetService("Workspace")
    local CoreGui = game:GetService("CoreGui")
    local Players = game:GetService("Players")
    local Noclip = Instance.new("ScreenGui")
    local BG = Instance.new("Frame")
    local Title = Instance.new("TextLabel")
    local Toggle = Instance.new("TextButton")
    local StatusPF = Instance.new("TextLabel")
    local Status = Instance.new("TextLabel")
    local Credit = Instance.new("TextLabel")
    local Plr = Players.LocalPlayer
    local Clipon = false
     
    Noclip.Name = "Noclip"
    Noclip.Parent = game.CoreGui
     
    BG.Name = "BG"
    BG.Parent = Noclip
    BG.BackgroundColor3 = Color3.new(0.0980392, 0.0980392, 0.0980392)
    BG.BorderColor3 = Color3.new(0.0588235, 0.0588235, 0.0588235)
    BG.BorderSizePixel = 2
    BG.Position = UDim2.new(0.149479166, 0, 0.82087779, 0)
    BG.Size = UDim2.new(0, 210, 0, 127)
    BG.Active = true
    BG.Draggable = true
     
    Title.Name = "Title"
    Title.Parent = BG
    Title.BackgroundColor3 = Color3.new(0.266667, 0.00392157, 0.627451)
    Title.BorderColor3 = Color3.new(0.180392, 0, 0.431373)
    Title.BorderSizePixel = 2
    Title.Size = UDim2.new(0, 210, 0, 33)
    Title.Font = Enum.Font.Highway
    Title.Text = "Noclip"
    Title.TextColor3 = Color3.new(1, 1, 1)
    Title.FontSize = Enum.FontSize.Size32
    Title.TextSize = 30
    Title.TextStrokeColor3 = Color3.new(0.180392, 0, 0.431373)
    Title.TextStrokeTransparency = 0
     
    Toggle.Parent = BG
    Toggle.BackgroundColor3 = Color3.new(0.266667, 0.00392157, 0.627451)
    Toggle.BorderColor3 = Color3.new(0.180392, 0, 0.431373)
    Toggle.BorderSizePixel = 2
    Toggle.Position = UDim2.new(0.152380958, 0, 0.374192119, 0)
    Toggle.Size = UDim2.new(0, 146, 0, 36)
    Toggle.Font = Enum.Font.Highway
    Toggle.FontSize = Enum.FontSize.Size28
    Toggle.Text = "Toggle"
    Toggle.TextColor3 = Color3.new(1, 1, 1)
    Toggle.TextSize = 25
    Toggle.TextStrokeColor3 = Color3.new(0.180392, 0, 0.431373)
    Toggle.TextStrokeTransparency = 0
     
    StatusPF.Name = "StatusPF"
    StatusPF.Parent = BG
    StatusPF.BackgroundColor3 = Color3.new(1, 1, 1)
    StatusPF.BackgroundTransparency = 1
    StatusPF.Position = UDim2.new(0.314285725, 0, 0.708661377, 0)
    StatusPF.Size = UDim2.new(0, 56, 0, 20)
    StatusPF.Font = Enum.Font.Highway
    StatusPF.FontSize = Enum.FontSize.Size24
    StatusPF.Text = "Status:"
    StatusPF.TextColor3 = Color3.new(1, 1, 1)
    StatusPF.TextSize = 20
    StatusPF.TextStrokeColor3 = Color3.new(0.333333, 0.333333, 0.333333)
    StatusPF.TextStrokeTransparency = 0
    StatusPF.TextWrapped = true
     
    Status.Name = "Status"
    Status.Parent = BG
    Status.BackgroundColor3 = Color3.new(1, 1, 1)
    Status.BackgroundTransparency = 1
    Status.Position = UDim2.new(0.580952346, 0, 0.708661377, 0)
    Status.Size = UDim2.new(0, 56, 0, 20)
    Status.Font = Enum.Font.Highway
    Status.FontSize = Enum.FontSize.Size14
    Status.Text = "off"
    Status.TextColor3 = Color3.new(0.666667, 0, 0)
    Status.TextScaled = true
    Status.TextSize = 14
    Status.TextStrokeColor3 = Color3.new(0.180392, 0, 0.431373)
    Status.TextWrapped = true
    Status.TextXAlignment = Enum.TextXAlignment.Left
     
    Credit.Name = "Credit"
    Credit.Parent = BG
    Credit.BackgroundColor3 = Color3.new(1, 1, 1)
    Credit.BackgroundTransparency = 1
    Credit.Position = UDim2.new(0.195238099, 0, 0.866141737, 0)
    Credit.Size = UDim2.new(0, 128, 0, 17)
    Credit.Font = Enum.Font.SourceSans
    Credit.FontSize = Enum.FontSize.Size18
    Credit.Text = "Created by HAX"
    Credit.TextColor3 = Color3.new(1, 1, 1)
    Credit.TextSize = 16
    Credit.TextStrokeColor3 = Color3.new(0.196078, 0.196078, 0.196078)
    Credit.TextStrokeTransparency = 0
    Credit.TextWrapped = true
     
    Toggle.MouseButton1Click:connect(function()
        if Status.Text == "off" then
            Clipon = true
            Status.Text = "on"
            Status.TextColor3 = Color3.new(0,185,0)
            Stepped = game:GetService("RunService").Stepped:Connect(function()
                if not Clipon == false then
                    for a, b in pairs(Workspace:GetChildren()) do
                    if b.Name == Plr.Name then
                    for i, v in pairs(Workspace[Plr.Name]:GetChildren()) do
                    if v:IsA("BasePart") then
                    v.CanCollide = false
                    end end end end
                else
                    Stepped:Disconnect()
                end
            end)
        elseif Status.Text == "on" then
            Clipon = false
            Status.Text = "off"
            Status.TextColor3 = Color3.new(170,0,0)
        end
    end)
end)






tab1:Button("Remove Nametag", function()
    lib:Notification("Notification", "Removes Nametag", "Ok")
    for _,m in pairs(game:GetService("Workspace"):GetDescendants()) do
        if m.ClassName == "TextLabel" then 
        if m.Text == game:GetService("Players").LocalPlayer.Name then
        m:Destroy()
        for j,m in pairs(game:GetService("Players").LocalPlayer:GetDescendants()) do
        if m.ClassName == "TextLabel" then 
        if m.Text == game:GetService("Players").LocalPlayer.Name then
        m:Destroy()
        for h,v in pairs(workspace[game.Players.LocalPlayer.Name].Head:GetChildren()) do
        if v:IsA('BillboardGui') then
        v:Remove()
        end
        end
        end
        end
        end
        end
        end
        end
        while true do
            for i,s in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if s:IsA("Accessory") then
            s.Parent = workspace
            end
            end
            for i,f in pairs(game.Workspace[game.Players.LocalPlayer.Name].Head:GetChildren()) do
                if f:IsA("Decal") and f.Name == "face" then
                    f.Parent = nil
                end
            end
            game:GetService("RunService").Stepped:wait()
        end
end)




tab1:Button("Hide All Stats", function()
    lib:Notification("Notification", "Hides Stats", "Ok")
    game:GetService("ReplicatedStorage").toggleEvent:InvokeServer("Record",false)
    game:GetService("ReplicatedStorage").toggleEvent:InvokeServer("Streak",false)
    game:GetService("ReplicatedStorage").toggleEvent:InvokeServer("Rank",false)
end)



tab1:Button("Show All Stats", function()
    lib:Notification("Notification", "Shows Stats", "Ok")
    game:GetService("ReplicatedStorage").toggleEvent:InvokeServer("Record",true)
    game:GetService("ReplicatedStorage").toggleEvent:InvokeServer("Streak",true)
    game:GetService("ReplicatedStorage").toggleEvent:InvokeServer("Rank",true)
end)



tab1:Button("TrashTalk (Y)", function()
    lib:Notification("Notification", "Key (Y)", "Ok")
    local words = {
        'ur bad',
        'Dont care',
        'Quit the game',
        'LOL',
        'sad',
        'I would quit if i had that shot',
        'Nika',
        'your horrible',
        'brickCity',
        'Get Off This Game LOL',
        'God you suck',
        'Glad i dont shot like that',
    }
    local player = game.Players.LocalPlayer
    local keybind = 'y'
    local event = game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest
    player:GetMouse().KeyDown:connect(function(key)
        if key == keybind then
            event:FireServer(words[math.random(#words)], "All")
      end
    end)
end)



tab2:Slider("WalkSpeed",16,20,1, function(ws)
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = ws
end)


tab2:Slider("FOV",70,120,1, function(f)
workspace.CurrentCamera.FieldOfView = f
end)



tab4:Button("Low GFX", function()
    lib:Notification("Notification", "GFX", "Ok")
    local ToDisable = {
        Textures = true,
        VisualEffects = false,
        Parts = true,
        Particles = false,
        Sky = false
    }
     
    local ToEnable = {
        FullBright = false
    }
     
    local Stuff = {}
     
    for _, v in next, game:GetDescendants() do
        if ToDisable.Parts then
            if v:IsA("Part") or v:IsA("Union") or v:IsA("BasePart") then
                v.Material = Enum.Material.SmoothPlastic
                table.insert(Stuff, 1, v)
            end
        end
     
        if ToDisable.Particles then
            if v:IsA("ParticleEmitter") or v:IsA("Smoke") or v:IsA("Explosion") or v:IsA("Sparkles") or v:IsA("Fire") then
                v.Enabled = false
                table.insert(Stuff, 1, v)
            end
        end
     
        if ToDisable.VisualEffects then
            if v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("DepthOfFieldEffect") or v:IsA("SunRaysEffect") then
                v.Enabled = false
                table.insert(Stuff, 1, v)
            end
        end
     
        if ToDisable.Textures then
            if v:IsA("Decal") or v:IsA("Texture") then
                v.Texture = ""
                table.insert(Stuff, 1, v)
            end
        end
     
        if ToDisable.Sky then
            if v:IsA("Sky") then
                v.Parent = nil
                table.insert(Stuff, 1, v)
            end
        end
    end
end)


local changeclr = win:Tab("Change UI Color")

changeclr:Colorpicker("Change UI Color",Color3.fromRGB(44, 120, 224), function(t)
lib:ChangePresetColor(Color3.fromRGB(t.R * 255, t.G * 255, t.B * 255))
end)
